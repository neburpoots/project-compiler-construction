export void test(){
  //empty vectors
  int[5] empty_vec;
  int[10] empty_vec2;
  int[15] empty_vec3;

  //empty matrix
  int[5,5] empty_vec;
  int[10,10] empty_vec2;
  int[15,10] empty_vec3;

  //initializing vector
  int[5] vec = [1,2,3,4,5];
  int[3] vec2 = [1,2,3];

  //initializing matrix
  int[3,3] mat = [[1,2,3], [4,5,6], [7,8,9]];
  int[2,2] mat = [[1,2], [4,5], [7,8]];
}

//print int vec to stdout
// export void printIntVec(int[n] vec, int[n,m]test) {
//     int counter = 0;

//     int[2] empty_vec;
//     int[2] empty_vec2;

//     // int[1,1] empty_matrix;
//     // int[5] int_vec = [1,2,3,4,5];

//     // printInt(vec[counter]);

//     // counter += 1;

//     while(counter < n){
//         printNewlines(1);
//         counter = counter + 1;
//     }
// }

//print float vec to stdout
// export void printFloatVec(float[n] vec){
//   int counter = 0;

//   while(counter < n){
//     printFloat(vec[counter]);
//     printNewlines(1);
//     counter = counter + 1;
//   }
// }

//print int matrix to stdout
// export void printIntMat(int[m,n] matrix){
//   int c1 = 0;
//   int c2 = 0;

//   while(c1 < n){
//     c2 = 0;
//     while(c2 < m){
//       printInt(matrix[c1,c2]);
//       printNewlines(1);
//       c2 = c2 + 1;
//     }
//     c1 = c1 + 1;
//   }
// }

//print float matrix to stdout
// export void printFloatMat(float[m,n] matrix){
//   int c1 = 0;
//   int c2 = 0;

//   while(c1 < n){
//     c2 = 0;
//     while(c2 < m){
//       printFloat(matrix[c1,c2]);
//       printNewlines(1);
//       c2 = c2 + 1;
//     }
//     c1 = c1 + 1;
//   }
// }

//scan int vec from stdin
// export void scanIntVec(int[n] vec){
//   int c1 = 0;
//   while(c1 < n){
//     vec[c1] = scanInt();
//     c1 = c1 + 1;
//   }
// }

// //scan float vec from stdin
// export void scanFloatVec(float[n] vec){
//   int c1 = 0;
//   while(c1 < n){
//     vec[c1] = scanFloat();
//     c1 = c1 + 1;
//   }
// }

// //scan int mat from stdin
// export void scanIntMat(int[m,n] mat){
//   int c1 = 0;
//   int c2 = 0;

//   while(c1 < m){
//     c2 = 0;
//     while(c2< n){
//       mat[c1,c2] = scanInt();
//       c2 = c2 + 1;
//     }
//     c1 = c1 + 1;
//   }
// }

//scan int mat from stdin
// export void scanFloatMat(float[m,n] mat){
//   int c1 = 0;
//   int c2 = 0;

//   while(c1 < m){
//     c2 = 0;
//     while(c2< n){
//       mat[c1,c2] = scanFloat();
//       c2 = c2 + 1;
//     }
//     c1 = c1 + 1;
//   }
// }

// export void matMul(float[m,n]a ,float[o,p] b, float[q,l] c){

// }