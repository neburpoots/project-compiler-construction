/*****************************************************************************
 *                                                                           *
 *                                   PHASES                                  *
 *                                                                           *
 *****************************************************************************/

start phase RootPhase {
    actions {
        pass SPdoScanParse;
        BuildSymbolTables;
        // print;
    }
};

traversal BuildSymbolTables{
    uid = BST,
    nodes = { Program, FunDef, FunBody, IfElse, While, DoWhile, For },
    travdata { 
        user stack_stptr symbol_table_stack_ptr
    }
};

traversal TestIfStatement {
    uid = IFS,
    nodes = { IfElse }
};

traversal TestWhileStatements{
  	uid = WH,
	nodes = { While }
};

traversal Print {
    uid = PRT
};

/*****************************************************************************
 *                                                                           *
 *                                   ENUMS                                   *
 *                                                                           *
 *****************************************************************************/

enum Type {
    // T_ collides with bison/flex generated stuff.
    prefix = CT,
    values {
        int, float, bool, void, array
    }
};

enum MonOpType {
    prefix = MO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

/*****************************************************************************
 *                                                                           *
 *                                  NODESETS                                 *
 *                                                                           *
 *****************************************************************************/

nodeset Constants = {Float, Bool, Num};

nodeset Operations = {Binop, Monop};

nodeset Decl = {GlobDef, GlobDecl, FunDef, FunDec};

nodeset Vars = {VarDecl, Var, VarLet};

nodeset Expr = {Cast, FunCall, Var, ArrExpr} | (Constants | Operations);

nodeset Stmt = {Assign, ExprStmt, IfElse, While, DoWhile, For, Return};

nodeset Named {
    nodes = Vars | (Decl | {FunCall, Param, Ids}),
    attributes {
        string name
    }
};

nodeset Typed {
    nodes = Vars | (Decl | (Operations | {Cast, FunCall, Param, Return})),
    attributes {
        Type type
    }
};

// Link you need to adapt when working with the symbol tables.
// I put it as a decl now, because an empty nodeset is not allowed.
nodeset Link = Decl;

nodeset Linked {
    nodes = {FunCall, Var, VarLet},
    attributes {
        Link decl
    }
};

/*****************************************************************************
 *                                                                           *
 *                                    NODES                                  *
 *                                                                           *
 *****************************************************************************/

//added the symbol table node but i think it should be attribute but i'll leavve it here for now. Its also still atached
node SymbolTable {
    attributes {
        user stable_stptr table { constructor }
    }
};

root node Program {
    children {
        Decls decls { constructor, mandatory },
        SymbolTable SymbolTable {}
    },
    attributes{
        user stable_stptr table
    }
};



node Decls {
    children {
        Decl decl { constructor, mandatory },
        Decls next { constructor }
    }
};

node Exprs {
    children {
        Expr expr { constructor, mandatory },
        Exprs next { constructor }
    }
};

node ArrExpr {
    children {
        // like [1,2,3,4,5]
        Exprs exprs { constructor, mandatory },
        // number to the i and j value?
        Exprs indices { constructor, mandatory }
    }
};

node Ids {
    children {
        Ids next { constructor }
    },
    attributes {
        string name { constructor }
    }
};

node ExprStmt {
    children {
        Expr expr { constructor, mandatory }
    }
};

node Return {
    children {
        Expr expr { constructor }
    }
};

node FunCall {
    children {
        Exprs fun_args { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Cast {
    children {
        Expr expr {constructor, mandatory }
    },

    attributes {
        Type type { constructor }
    }
};

node FunDefs {
    children {
        FunDef fundef { constructor, mandatory },
        FunDefs next { constructor }
    }
};

node FunDef {
    children {
        FunBody body { constructor },
        Param params { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool export { constructor }
    }
};

node FunBody {
    children {
        VarDecl decls { constructor },
        FunDefs local_fundefs { constructor },
        Stmts stmts  { constructor }
    }
};

node IfElse {
    children {
        Expr cond { constructor, mandatory },
        Stmts then { constructor },
        Stmts else_block { constructor }
    }
};

node While {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    }
};

node DoWhile {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    }
};

node For {
    children {
        Expr start_expr { constructor, mandatory },
        Expr stop { constructor, mandatory },
        Expr step {constructor},
        Stmts block {constructor}
    },

    attributes {
        string var
    }
};

node GlobDecl {
    children {
        Ids dims { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node FunDec {
    children {
        Param params { constructor }
    },
    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node GlobDef {
    children {
        Exprs dims { constructor },
        Expr init { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool export { constructor }
    }
};

node Param {
    children {
        Ids dims { constructor },
        Param next { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

//TODO HANDLE ARRAYS
//Means parsing and filling in dims in the constructor if needed.
node VarDecl {
    children {
        Exprs dims { constructor },
        Expr init { constructor },
        VarDecl next { constructor }
    },
    attributes {
        string name { constructor, mandatory },
        Type type { constructor }
    }
};

node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node Assign {
    children {
        VarLet let { constructor },
        Expr expr { constructor, mandatory }
    }
};

node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    },

    attributes {
        BinOpType op { constructor }
    }
};

node Monop {
    children {
        Expr operand { constructor, mandatory }
    },

    attributes {
        MonOpType op { constructor }
    }
};

node VarLet {
    children {
        Exprs indices { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Var {
    children {
        Exprs indices { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Num {
    attributes {
        int val { constructor }
    }
};

node Float {
    attributes {
        float val { constructor }
    }
};

node Bool {
    attributes {
        bool val { constructor }
    }
};
