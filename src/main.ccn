/*****************************************************************************
 *                                                                           *
 *                                   PHASES                                  *
 *                                                                           *
 *****************************************************************************/

start phase RootPhase {
    actions {
        pass SPdoScanParse;
        BuildConstantTable;
        BuildImportTable;
        BuildExportTable;
        BuildSymbolTables;
        TransformVariableInit;
        PrintCurrentProgram;
        TypeChecking;
        TransformBinopDisjunctionConjuntion;
        TransformBooleanCasts;
        GenerateAssemblyCode;
        ClearSymbolTables;

        //used now for clearing constant table(for memory)
        ClearConstantTable;
        ClearExportTable;
        ClearImportTable;

        Print;
    }
};

traversal BuildImportTable {
    uid = BIT,
    nodes = { Program, FunDec },
    travdata {
        user itable_stprt import_table_ptr
    }
};

traversal ClearImportTable{
  uid = CIT,
  nodes = { Program }
};

traversal BuildExportTable {
    uid = BET,
    nodes = { Program, FunDef },
    travdata {
        user etable_stprt export_table_ptr
    }
};

traversal ClearExportTable{
  uid = CET,
  nodes = { Program }
};

traversal BuildConstantTable{
  uid = BCT,
  nodes = { Program, Num, Float, Bool},
  travdata {
    user ctable_stprt const_table_ptr
  }
};

traversal ClearConstantTable{
  uid = CCT,
  nodes = { Program}
};

traversal BuildSymbolTables{
    uid = BST,
    nodes = { Program, GlobDef, GlobDecl, FunDef, FunDec, FunBody, IfElse, While, DoWhile, For, Param, VarDecl, Assign, Return },
    travdata { 
        user stack_stptr symbol_table_stack_ptr
    }
};

traversal ClearSymbolTables{
    uid = CST,
    nodes = { Program, FunDef, IfElse, While, DoWhile, For, GlobDecl, FunDec, GlobDef }
};

traversal TypeChecking {
    uid = TC,
    nodes = { Program, GlobDef, GlobDecl, FunDef, FunDec, FunBody, IfElse, While, DoWhile, For, Param, Assign, VarDecl, Binop, Return},
    travdata {
        int type_error_count,
        Fundef current_function
    }
};

// This traversal is used to transform variable initializations into assignments.
traversal TransformVariableInit {
    uid = TVI,
    nodes = { Program, GlobDef, VarDecl, Fundef, FunContents },
    travdata { 
        user generic_stack_stptr assignments,
        // user generic_stack_stptr var_decls,
        user generic_stack_stptr stmts,
        user generic_stack_stptr global_assignments,
        user stack_stptr current_symbol_table_stack_ptr,
        FunContents current_scope,
        int temp_counter,
        bool in_global_scope,
        bool in_array_dim,
        bool init_func_created
    }
};

traversal TransformBinopDisjunctionConjuntion{
  uid = TBDC,
  nodes = {Binop}
};

traversal TransformBooleanCasts {
    uid = TBC,
    nodes = { Cast }
};

traversal PrintCurrentProgram {
    uid = PCP,
    nodes = { Program, Decls, FunDef, Funbody, FunContents, GlobDef, GlobDecl, FunDec, Param, VarDecl, Assign, Binop, Monop, VarLet, Var, Num, Float, Bool, Cast, FunCall, Exprs, ArrExpr, Ids, ExprStmt, Return, IfElse, While, DoWhile, For }
};

traversal Print {
    uid = PRT
};

traversal GenerateAssemblyCode{
  uid = GAC,
  nodes = { Program, FunDef }
};

/*****************************************************************************
 *                                                                           *
 *                                   ENUMS                                   *
 *                                                                           *
 *****************************************************************************/

enum Type {
    // T_ collides with bison/flex generated stuff.
    prefix = CT,
    values {
        int, float, bool, void, array
    }
};

enum MonOpType {
    prefix = MO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

/*****************************************************************************
 *                                                                           *
 *                                  NODESETS                                 *
 *                                                                           *
 *****************************************************************************/

nodeset Constants = {Float, Bool, Num};

nodeset Operations = {Binop, Monop};

nodeset Decl = {GlobDef, GlobDecl, FunDef, FunDec};

nodeset Vars = {VarDecl, Var, VarLet};

nodeset Expr {
    nodes = {Cast, FunCall, Var, ArrExpr, CondExpr} | (Constants | Operations),
    attributes {
        Type type
    }
};

nodeset Stmt = {Assign, ExprStmt, IfElse, While, DoWhile, For, Return};

nodeset FunContent = {VarDecl, FunDef} | Stmt;

nodeset Named {
    nodes = Vars | (Decl | {FunCall, Param, Ids}),
    attributes {
        string name
    }
};

nodeset Typed {
    nodes = Vars | (Decl | (Operations | {Cast, FunCall, Param, Return})),
    attributes {
        Type type
    }
};

// Link you need to adapt when working with the symbol tables.
// I put it as a decl now, because an empty nodeset is not allowed.
nodeset Link = Decl;

nodeset Linked {
    nodes = {FunCall, Var, VarLet},
    attributes {
        Link decl
    }
};

/*****************************************************************************
 *                                                                           *
 *                                    NODES                                  *
 *                                                                           *
 *****************************************************************************/
root node Program {
    children {
        Decls decls { constructor, mandatory }
    },
    attributes {
        user stable_stptr table,
        user ctable_stprt constant_table,
        user etable_stprt export_table,
        user itable_stprt import_table
    }
};

node Decls {
    children {
        Decl decl { constructor, mandatory },
        Decls next { constructor }
    }
};

node Exprs {
    children {
        Expr expr { constructor, mandatory },
        Exprs next { constructor }
    }
};

node ArrExpr {
    children {
        // like [1,2,3,4,5]
        Exprs exprs { constructor },
        // number to the i and j value?
        Exprs indices { constructor }
    }
};

node Ids {
    children {
        Ids next { constructor }
    },
    attributes {
        string name { constructor }
    }
};

node ExprStmt {
    children {
        Expr expr { constructor, mandatory }
    }
};

node Return {
    children {
        Expr expr { constructor }
    },
    attributes {
        user stable_stptr table
    }
};

node FunCall {
    children {
        Exprs fun_args { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Cast {
    children {
        Expr expr {constructor, mandatory }
    },

    attributes {
        Type type { constructor }
    }
};

node FunDefs {
    children {
        FunDef fundef { constructor, mandatory },
        FunDefs next { constructor }
    }
};

node FunDef {
    children {
        Param params { constructor },
        FunBody body { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool export { constructor },
        user stable_stptr table
    }
};

node FunBody {
    children {
        FunContents funContents { constructor }
        // Stmts stmts  { constructor }
    }
};

node IfElse {
    children {
        Expr cond { constructor, mandatory },
        Stmts then { constructor },
        Stmts else_block { constructor }
    },
    attributes{
        user stable_stptr table
    }
};

node While {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    },
    attributes{
        user stable_stptr table
    }
};

node DoWhile {
    children {
        Expr cond { constructor, mandatory },
        Stmts block { constructor }
    },
    attributes{
        user stable_stptr table
    }
};

node For {
    children {
        Expr start_expr { constructor, mandatory },
        Expr stop { constructor, mandatory },
        Expr step {constructor},
        Stmts block {constructor}
    },

    attributes {
        string var {constructor},
        user stable_stptr table
    }
};

node GlobDecl {
    children {
        Ids dims { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        user stable_stptr table
    }
};

node FunDec {
    children {
        Param params { constructor }
    },
    attributes {
        string name { constructor },
        Type type { constructor },
        user stable_stptr table
    }
};

node GlobDef {
    children {
        Exprs dims { constructor },
        Expr init { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor },
        bool export { constructor },
        user stable_stptr table
    }
};

node Param {
    children {
        Ids dims { constructor },
        Param next { constructor }
    },

    attributes {
        string name { constructor },
        Type type { constructor }
    }
};

node VarDecls {
    children {
        VarDecl vardecl { constructor, mandatory },
        VarDecls next { constructor }
    }
};

node VarDecl {
    children {
        Exprs dims { constructor },
        Expr init { constructor }
    },
    attributes {
        string name { constructor, mandatory },
        Type type { constructor }
    }
};

node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node FunContents {
    children {
        FunContent funContent { constructor, mandatory },
        FunContents next { constructor }
    }
};

node Assign {
    children {
        VarLet let { constructor },
        Expr expr { constructor, mandatory }
    },
    attributes {
        user stable_stptr table
    }
};

node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    },

    attributes {
        BinOpType op { constructor }
    }
};

node CondExpr {
    children {
        Expr cond { constructor, mandatory },
        Expr then_expr { constructor, mandatory },
        Expr else_expr { constructor, mandatory }
    },
    attributes {
        Type type { constructor }
    }
};

node Monop {
    children {
        Expr operand { constructor, mandatory }
    },

    attributes {
        MonOpType op { constructor }
    }
};

node VarLet {
    children {
        Exprs indices { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Var {
    children {
        Exprs indices { constructor }
    },

    attributes {
        string name { constructor }
    }
};

node Num {
    attributes {
        int val { constructor }
    }
};

node Float {
    attributes {
        float val { constructor }
    }
};

node Bool {
    attributes {
        bool val { constructor }
    }
};
